pageIntro:
  title: 'Core technology'
  para:
    link1:
      name: SAFE Client Libs
      href: 'https://github.com/maidsafe/safe_client_libs'
    chunk1: The SAFE Network is powered by a set of modular libraries written in Rust. With each library being dedicated to a specific facet of the network. This modular structure should make it easy for anyone to dig into the code, propose improvements and get involved.
client_libs:
  title: The SAFE Client Libraries
  para: "The SAFE Client libs are a trio of libraries that provide the APIs needed for applications to interface with the SAFE Network."
  para2: "It powers our Nodejs and C# libraries, with a view to automate language bindings to really open up application development across as many languages as possible."
  para3: "There are three main components to SAFE Client Libs: SAFE Core, SAFE Authenticator, and SAFE App, with Core being implemented on top of Routing, and Authenticator and App layers being built on top of Core. Each higher-level crate builds on functionality from the lower-level ones."
  comp1:
    name: SAFE Core
    link:
      name: view on github
      href: 'https://github.com/maidsafe/safe_client_libs/tree/master/safe_core'
    para:
      chunk1: "SAFE Core provides the foundation for the Authenticator and App libraries. It provides an interface for all requests from the higher-level API’s to the actual Routing layer. It abstracts away interactions with Routing, managing them with an event loop in a non-blocking client. It also provides convenient functionality for the upper API’s including type definitions, network file system utilities, interprocess communication utilities, cryptographic utilities, among others. SAFE Core uses Rust"
      highlight1: futures
      chunk2: "crate to provide asynchronous APIs."
  comp2:
    name: Authenticator
    link:
      name: view on github
    href: 'https://github.com/maidsafe/safe_client_libs/tree/master/safe_authenticator'
    para1: "The SAFE Authenticator library provides APIs for the frontend user interface, allowing users to log-on to the SAFE Network."
    para2: "It contains all the functionality for creating accounts, logging in, getting account information and both authorising and revoking application access to a user's data."
    para3: "This crate also provides ways to manage application and Mutable Data permissions."
  comp3:
    name: SAFE App
    link:
      name: view on github
      href: 'https://github.com/maidsafe/safe_client_libs/tree/master/safe_app'
    para: "The SAFE App library provides the application APIs to the network, which largely consists of a C-compatible foreign function interface."
    para2: "These APIs allow applications to interact with the Authenticator and the network itself, registering apps in the user's account and obtain the necessary handles which are necessary for many of the functions in this library. It can also be used in the unregistered mode if an app wants to have a read-only access to the network. SAFE App provides various other facilities which are required by higher-level apps, such as routines for manipulating Immutable and Mutable Data."
    para3: "Most of the functions in this library either take as parameters, or return handles to, objects which are themselves stored in a cache within the library."
network_libs:
  title: The SAFE Network Libraries
  para: "The heart of the network. These libraries provide the functionality that makes the SAFE Network autonomous and secure."
  comp4:
    name: Routing
    link:
      name: view on github
      href: 'https://github.com/maidsafe/routing'
    para1: "This library provides client and node implementations for a resilient decentralised network. The network is based on the kademlia routing table and uses the XOR metric to define the “distance” between two XOR names. These XOR names are used as addresses of nodes, clients, and data. Routing also provides the two types for the data of messages: Immutable Data and Mutable Data."
    para2: "A decentralised service based on the Routing library uses the Client struct to send requests to the network of nodes and receive responses. The Node struct is used to handle and send requests within that network and to implement its functionality, including storing and retrieving data, validating permissions, and managing metadata."
  comp5:
    name: Crust
    link:
      name: view on github
      href: 'https://github.com/maidsafe/crust'
    para: "The Crust (short for “Connections in Rust”) library provides reliable peer-to-peer network connections. It enables establishing and maintaining such connections across a wide variety of network conditions and protocols. The main object through which Crust is used is the Service struct, which represents all the Crust services."
rfcs:
  title: RFCs
  rfc1:
    name: Mutable Data
    href: 'https://github.com/maidsafe/rfcs/blob/master/text/0047-mutable-data/0047-mutable-data.md'
  rfc2:
    name: Async safe_core
    href: 'https://github.com/maidsafe/rfcs/blob/master/text/0043-async-safe-core/0043-async-safe-core.md'
  rfc3:
    name: Auth Flow
    href: 'https://github.com/maidsafe/rfcs/blob/master/text/0046-new-auth-flow/0046-new-auth-flow.md'
  rfc4:
    name: Authorise Apps
    href: 'https://github.com/maidsafe/rfcs/blob/master/text/0048-authorise-apps/0048-authorise-apps.md'
  rfc5:
    name: Containers
    href: 'https://github.com/maidsafe/rfcs/blob/master/text/0046-new-auth-flow/containers.md'
patents:
  title: Relevant Patents
  patent1:
    name: Method for storing data on a peer-to-peer network
    href: '/patent1'
  patent2:
    name: Method for storing data on a peer-to-peer network
    href: '/patent2'
  patent3:
    name: Method for storing data on a peer-to-peer network
    href: '/patent3'
